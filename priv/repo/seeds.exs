# Script for populating the database. You can run it as:
#
#     mix run priv/repo/seeds.exs
#
# Inside the script, you can read and write to any of your
# repositories directly:
#
#     JdAdmin.Repo.insert!(%JdAdmin.SomeModel{})
#
# We recommend using the bang functions (`insert!`, `update!`
# and so on) as they will fail if something goes wrong.

alias JdAdmin.Repo
alias JdAdmin.Post
alias JdAdmin.Project
alias JdAdmin.Upload

%Post{
  title: "Working with Ember components",
  slug: "working-with-ember-components",
  featured_image: "working-with-ember-cover.jpg",
  excerpt: "A quick look at utilising components in Ember CLI",
  body: "*Ember JS version 2.1 and Emblem*\n\n##The move to Components\n\nEmber recently deprecated the use of Views in favour of using Components. This means that the Model-View-Controller approach we have seen in the past has been replaced with Model-Route-Component-Service following a DDAU methodology (data down, actions up). For more information of the reasoning behind these transitions I recommend taking a look at [the EmberJS blog](http://emberjs.com/blog/).\n\nWhile this may seem daunting at first I feel its definitely a move in the right direction, encouraging reusable components and isolation of concerns. Let's take a look at handling a pretty simple use of Components to create a collapsable site navigation menu. This post is written with Ember CLI. Ember JS 2.1.0 and [Emblem](http://emblemjs.com/) in mind, if I've made any mistakes please feel free to let me know!\n\n##Setting up\n\nI'm going to use a cut down version of some code I wrote recently, it will comprise of `site-nav` and `site-nav-toggle`. Components should have a `-` in the name, this is to prevent clashes with future HTML element names and complies with the W3C [Custom Element](http://w3c.github.io/webcomponents/spec/custom/) spec.\n\n\n###Creating some components\n\nThe easiest way to get started is to use Embers CLIs built in blueprints:\n    \n    ember g component site-nav\n    ember g component site-nav-toggle\n    \nThis will generate 3 files for each component:\n  \n- Template - `app/templates/components/component-name.emblem`\n- Subclass - `app/components/component-name.js`\n- Test - `app/tests/integration/components/component-name-test.js`\n\nI'm going to make the assumption that your navigation will be nested within your apps `application` so that it is consistent throughout your app. To render the components in your `application.emblem` add:\n  \n*`app/templates/components/site-nav-toggle.emblem`*\n\n\t= site-nav-toggle\n\t= site-nav\n  \nLet's give our components some simple content:\n  \n*`app/templates/components/site-nav-toggle.emblem`*\n\n\tspan Show menu\n  \n*`app/templates/components/site-nav.emblem`*\n\n\tul.site-nav__wrapper\n\t  li.site-nav__item Nav link 1\n\t  li.site-nav__item Nav link 2\n\t  li.site-nav__item Nav link 3\n\t  li.site-nav__item Nav link 4\n\t  \nWe wont add any HTML elements to wrap the markup we just wrote as we can do that within the Subclass of each component.\n\nWhile it may not have any behaviour to make the navigation do anything just yet, when hitting `ember serve` in the terminal and jumping to `localhost:4200` in your browser you should see our new components appearing on the page.\n\n###Handling the interaction\n\nComponents are small contained chunks, they don't have the ability to communicate directly to each other so how will we get a click on the toggle to trigger the hiding/showing of the navigation? This is where the data down, actions up convention comes in to play.\n\nAs we cant communicate directly we will need to pass information about the current state and set up actions to handle events. There may be other ways to approach this however for me the most semantic way was to create a state property on the parent controller. We don't need to explicitly set this state on the controller as calling `this.set('navState', 1);` within our components will do this for us however we do need to pass that information to them (data down). To do this let's modify our application template, we can easily pass our `navState` property to our components like so:\n  \n*`app/templates/components/site-nav-toggle.emblem`*\n\n\t= site-nav-toggle navState=navState\n\t= site-nav navState=navState\n\t\nNow we have the ability to communicate the current state of the navigation and utilise that property within our components, for ease let's say `1` is open and `0` is closed. \n\nWe will also need to add an action on the `site-nav-toggle` to open/collapse our `site-nav` and while we're at it setup how it will render. Let's go back to our Subclasses:\n\n*`app/components/site-nav-toggle.js`*\n\n\timport Ember from 'ember';\n\t\n\texport default Ember.Component.extend({\n\t  // sets the class we will add to the component wrapper element\n\t  classNames: ['.site-nav-toggle'],\n\t  \n\t  // On click we toggle the value of navState on the controller between 1 and 0.\n\t  click: function() {\n\t    if (this.get('navState') === 0) {\n\t      this.set('navState', 1);\n\t    } else {\n\t      this.set('navState', 0);\n\t    }\n\t  },\n\t});\n\nFor our `site-navigation` let's add an opening and closing animation to our nav (we can worry about implementing the animation later):\n\n*`app/components/site-nav.js`*\n\n\timport Ember from 'ember';\n\t\n\texport default Ember.Component.extend({\n\t  tagName: 'nav'\n\t  classNames: ['site-nav'],\n\t  \n\t  // Here we map functions to each of the values of navState\n\t  navStateMap: {\n\t    0: 'navCloseAnimation',\n\t    1: 'navOpenAnimation'\n\t  },\n\t\n\t  navCloseAnimation: function() {\n\t    console.log('Goodbye');\n\t  },\n\t\n\t  navOpenAnimation: function() {\n\t    console.log('Hello');\n\t  },\n\t  \n\t  // Here we observe changes to the navState property, if it changes we call the corresponding function from the navStateMap.\n\t  navStateChanged: (function() {\n\t    return this[this.get('navStateMap')[this.get('navState')]]();\n\t  }).observes('navState'),\n\t});\n\nNow when we click our `site-nav-toggle` we should see the relevant log message pop up in our browser console when we click the toggle.\n\nI won't go into styling the navigation etc however for creating some really nice transitions I recommend taking a look at [Greensock](http://greensock.com/get-started-js) animation platform. This fits perfectly with the system we have set up in this tutorial:\n\n*`app/components/site-nav.js`*\n\n\timport Ember from 'ember';\n\t\n\texport default Ember.Component.extend({\n\t  tagName: 'nav'\n\t  classNames: ['site-nav'],\n\t  timeline: new TimelineLite({paused: true}),\n\t  \n\t  navStateMap: {\n\t    0: 'navCloseAnimation',\n\t    1: 'navOpenAnimation'\n\t  },\n\t\n\t  navCloseAnimation: function() {\n\t    this.timeline.reverse();\n\t  },\n\t\n\t  navOpenAnimation: function() {\n\t    this.timeline.play();\n\t  },\n\t\n\t  navStateChanged: (function() {\n\t    return this[this.get('navStateMap')[this.get('navState')]]();\n\t  }).observes('navState'),\n\t\n\t  navAnimation: (function() {\n\t    this.timeline.append(TweenLite.to($('.site-nav'), 0.2, {\n\t      marginTop: 0,\n\t      ease: Power2.easeInOut\n\t    }));\n\t  }).on('didInsertElement'),\n\t});\n\nIn the example above we create a timeline using `TimelineLite` and set it to paused. We then append some keyframes to that timeline which will show the navigation. Rather than setting up two separate animations we just set one and play/reverse it, Greensock takes care of everything else! It assumes that the `site-nav` is set to be hidden via CSS. While this is a fairly crude example you can start to see how you could start to build some pretty cool transitions quickly and easily.\n\n\n###Sending Actions\n\nThe example here is pretty simple, we change a property on the parent controller and respond accordingly.\n\nThere are some scenarios however where this approach may not be applicable. A good example for this is where a click on a component should trigger a route change, components have no ability to transition to different routes in our application.\n\nIn this scenario we need to use Embers `sendAction()` helper. For example purposes let's create a next/previous button component.\n\nHere's our `page-nav` template:\n\t\n\tspan = direction\n\nHere's our subclass:\n\n\timport Ember from 'ember';\n\t\n\texport default Ember.Component.extend({\n\t  classNameBindings: ['classDirection'],\n\t\n\t  // Here we set a string to pass to classNameBindings so we can style up the next/prev buttons differently.\n\t  classDirection: function() {\n\t    return 'page-nav--' + this.get('direction');\n\t  }.property('direction'),\n\t\n\t  // Here we send the action to bubble up to the parent passing it the transitionTarget parameter.\n\t  click: function() {\n\t    this.sendAction('action', this.get('transitionTarget'));\n\t  }\n\t});\n\t\nTo render this in our parent template we can simply add:\n\t\n    = page-nav action=\"changeSection\" direction=\"prev\" transitionTarget=prevPage\n    = page-nav action=\"changeSection\" direction=\"next\" transitionTarget=nextPage\n    \nWe pass the `direction` which is useful to make our button a little more reusable. We also pass the `transitionTarget`, we wont go in to detail on how this might be calculated however this would be pass the target route for the next/prev pages.\n\nTo get the click action to work however it is vital that you specify the action when calling the component otherwise it wont fire.\n\nNow lets set up the actions in our parent controller:\n\n\timport Ember from 'ember';\n\t\n\texport default Ember.Controller.extend({\n\t  actions: {\n\t    changeSection: function(transitionTarget) {\n\t      this.transitionToRoute(transitionTarget);\n\t    }\n\t  }\n\t});\n\nNow the click event will fire the `changeSection` action on the parent controller and trigger a `transitionToRoute` to the route specified in the `transitionTarget` parameter.\n\n##Conclusion\n\nSo there we have it, we can now create components, pass them data and send actions back up the chain. While these examples are fairly basic they should form a good foundation for going forward.\n\nFor further reading I strongly recommend reading through the official docs and there are some great guides on [Ember Igniter](http://emberigniter.com/).\n\nHopefully this has been a useful dive into working with Components. Any questions or if you notice any mistakes, don't hesitate to get in touch!",
  related_first: "jumping-into-bem"
} |> Repo.insert!

%Post{
  title: "Jumping into BEM",
  slug: "jumping-into-bem",
  featured_image: "jumpin-into-bem-cover.jpg",
  excerpt: "Bringing structure to the chaos",
  body: "CSS is can be nightmare to work with as a frontend developer and projects can quickly spiral out of control. Following a solid naming convention can at least mitigate much of the pain.\n\nOne such methedology is BEM (Block, Element, Modifier). The goal is to give meaningful relationships between classes and their scope and make projects scalable and easier to manage within large teams. So how does it work?\n\n###BEM naming convention\nI'm going to be using Sass and Slim quite a lot within examples however the syntax isn't important, only the conventions.\n\nBEM classes are constructed like so:\n\n\n\n    // A Block represents an independent component on the page:\n    .block {}\n\n    // An Element is a sub element of a block which wouldn't be required outside of its scope:\n    .block__element {}\n\n    // A Modifier is used to define a behavior or appearance of an element or block:\n    .block__element--modifier {}\n\n\n\nAs can be seen in the example above we use double underscores and hyphens to denote the relationships, elements with underscores and modifiers with hyphens.\n\nLets take an example login block:\n\n\n\n    .login-block\n      .login-block__inner\n        h1.login-block__title Login now!\n\n        input.login-block__input--email\n        input.login-block__input--password\n\n        button.login-block__submit\n\n\n\nThe Block in this example is the `login-block`, it is an isolated component on the page. Using Scss we might have something like:\n\n\n\n    .login-block {\n      // Code...\n    }\n\n\n\nThere are a number of Elements within this Block, many of which in a real life app may have inherited their styling from elsewhere in a more reusable manor however for the purposes of this example its quite logical. We define a `.login-block__input` element here, we can imediately guage the scope of this element and its purpose. Rather than treating the email and password inputs as separate elements we simply pass a modifier of `--email` and `--password` allowing us to logically apply styling to both and modify for each field as required. Using the power of nesting in Scss we might have the following:\n\n\n\n    [class*=\"login-block__input\"] {\n      // Styling to appy to all .login-block__input elements\n    }\n\n    .login-block__input {\n      &--email {\n        // Styling specific to the --email modifier\n      }\n\n      &--password {\n        // Styling specific to the --password modifier\n      }\n    }\n\n\n\nThe key to BEM and making it work well is really isolating components logically within the project. An example might be if our site had a sidebar, we might use the following markup:\n\n\n\n    .sidebar\n      .sidebar__inner\n\n\n\nNow if we add a login box to this sidebar how do we tackle it? The login block should be handled as its own block in isolation to the sidebar, it being present in the sidebar is largely circumstantial so the following would be appropriate:\n\n\n\n    .sidebar\n      .sidebar__inner\n\n        .login-block\n          // Login block contents\n\n\n\nIf we require that the login block has unique styling for use within the sidebar then we can use a modifier such as `.login-block--sidebar` allowing us both flexability and reusability.\n\n\nThis provides logical structure of our elements and modifiers and a pattern that can easily be understood by anyone new coming to the codebase. It also allows us to keeps our CSS selectors to a minimum and our specificity easy to manage.\n\n###Projects using BEM\n\nAs an example for working with BEM I have a couple of projects I'm currently working on including a lightweight CSS framework called Cactus which you can see [on GitHub](https://github.com/MrDinsdale/Cactus).\n\nFor more reading on BEM I recommend checking out [this briliant post](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/) by Harry Roberts (aka _[CSSWizardry](http://csswizardry.com)_).",
  related_first: "working-with-ember-components"
} |> Repo.insert!

%Project{
  title: "Thomas Stubbs",
  slug: "thomas-stubbs",
  featured_image: "thomas-stubbs-cover.jpg",
  excerpt: "Menswear Stylist & Writer",
  project_url: "http://thomasstubbs.com",
  body: "Stubbs trained in women’s wear design at Middlesex University, graduating in 1992 with a double first class B.A. Hons in Fashion Design. His final runway show won many accolades, including significant coverage in The Face magazine. Moving immediately into men’s styling, he worked on pivotal Nineties mens magazine brand Loaded during its fledgling years as stylist and fashion editor, developing a directly masculine and straight-up attitude towards gutsily embracing menswear & style. While honing his styling skills during this period, he began writing for The Sunday Times Style in 2000. In 2003 He became Style’s first menswear columnist with ‘Talking Trousers’. Stubbs writes for The FT/How To Spend It, The Daily Telegraph, The Rake, Esquire’s Big Black Book & GQ.\n\nStubbs is currently ‘The Sharpener’ men’s style and luxury columnist for The FT How To Spend It & The Rake magazine’s Fashion Editor At Large"
} |> Repo.insert!

%Project{
  title: "Jake Walters",
  slug: "jake-walters",
  featured_image: "jake-walters-cover.jpg",
  excerpt: "Menswear Stylist & Writer",
  project_url: "http://thomasstubbs.com",
  body: "Jake Walters is a London based photographer who works on a wide range of assignments internationally and domestically. His portraits of leading figures in art, literature, and entertainment carry his bold, dramatic style - typically charged with emotion, narrative and humour.\n\nJake's editorial clients include Another Magazine, British GQ, British Vogue, GQ Style, Guardian Weekend, V Magazine, and Vanity Fair. Advertising and other clients include BBH, DDB, Macy's, Saatchi And Saatchi, Pringle Of Scotland and TAG Heuer. He has also had his work exhibited at The National Portrait Gallery."
} |> Repo.insert!

%Project{
  title: "Cactus CSS Framework",
  slug: "cactus-css-framework",
  featured_image: "cactus-css-framework-cover.jpg",
  excerpt: "So dry it chafes",
  project_url: "https://github.com/MrDinsdale/Cactus",
  body: "Cactus is a very minimal but flexible CSS grid framework powered by Scss. Rather than defining a list of potential column widths, Cactus lets you define your own and automatically generates the classes for you.\n\nThere are a great number of CSS frameworks out there to choose from however I have always found my self fighting them. My aim was to create a highly flexible but lightweight solution suitable for use on any project requiring high performance where every byte is important. By allowing developers to tailor the CSS output to their needs, Cactus allows for massive reductions in file size by reducing unused code.\n\nFeel free check out [Cactus on GitHub](https://github.com/MrDinsdale/Cactus).\n\nDocumentation will be updated asap and as new features are added."
} |> Repo.insert!
